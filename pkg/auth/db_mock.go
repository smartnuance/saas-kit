// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/smartnuance/saas-kit/pkg/auth (interfaces: DBAPI)

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	dbmodels "github.com/smartnuance/saas-kit/pkg/auth/dbmodels"
	roles "github.com/smartnuance/saas-kit/pkg/lib/roles"
)

// MockDBAPI is a mock of DBAPI interface.
type MockDBAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDBAPIMockRecorder
}

// MockDBAPIMockRecorder is the mock recorder for MockDBAPI.
type MockDBAPIMockRecorder struct {
	mock *MockDBAPI
}

// NewMockDBAPI creates a new mock instance.
func NewMockDBAPI(ctrl *gomock.Controller) *MockDBAPI {
	mock := &MockDBAPI{ctrl: ctrl}
	mock.recorder = &MockDBAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBAPI) EXPECT() *MockDBAPIMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockDBAPI) BeginTx(arg0 context.Context) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", arg0)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockDBAPIMockRecorder) BeginTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockDBAPI)(nil).BeginTx), arg0)
}

// Commit mocks base method.
func (m *MockDBAPI) Commit(arg0 *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockDBAPIMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDBAPI)(nil).Commit), arg0)
}

// CreateProfile mocks base method.
func (m *MockDBAPI) CreateProfile(arg0 context.Context, arg1 *sql.Tx, arg2 string, arg3 *dbmodels.User, arg4 roles.Role) (*dbmodels.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*dbmodels.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockDBAPIMockRecorder) CreateProfile(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockDBAPI)(nil).CreateProfile), arg0, arg1, arg2, arg3, arg4)
}

// CreateUser mocks base method.
func (m *MockDBAPI) CreateUser(arg0 context.Context, arg1 *sql.Tx, arg2, arg3 string, arg4 []byte) (*dbmodels.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*dbmodels.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDBAPIMockRecorder) CreateUser(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDBAPI)(nil).CreateUser), arg0, arg1, arg2, arg3, arg4)
}

// DeleteAllTokens mocks base method.
func (m *MockDBAPI) DeleteAllTokens(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllTokens", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllTokens indicates an expected call of DeleteAllTokens.
func (mr *MockDBAPIMockRecorder) DeleteAllTokens(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllTokens", reflect.TypeOf((*MockDBAPI)(nil).DeleteAllTokens), arg0, arg1)
}

// DeleteToken mocks base method.
func (m *MockDBAPI) DeleteToken(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockDBAPIMockRecorder) DeleteToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockDBAPI)(nil).DeleteToken), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockDBAPI) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDBAPIMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDBAPI)(nil).DeleteUser), arg0, arg1)
}

// FindUserByEmail mocks base method.
func (m *MockDBAPI) FindUserByEmail(arg0 context.Context, arg1 string) (*dbmodels.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(*dbmodels.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockDBAPIMockRecorder) FindUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockDBAPI)(nil).FindUserByEmail), arg0, arg1)
}

// GetInstance mocks base method.
func (m *MockDBAPI) GetInstance(arg0 context.Context, arg1 string) (*dbmodels.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", arg0, arg1)
	ret0, _ := ret[0].(*dbmodels.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockDBAPIMockRecorder) GetInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockDBAPI)(nil).GetInstance), arg0, arg1)
}

// GetProfile mocks base method.
func (m *MockDBAPI) GetProfile(arg0 context.Context, arg1, arg2 string) (*dbmodels.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dbmodels.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockDBAPIMockRecorder) GetProfile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockDBAPI)(nil).GetProfile), arg0, arg1, arg2)
}

// GetUserAndProfile mocks base method.
func (m *MockDBAPI) GetUserAndProfile(arg0 context.Context, arg1, arg2 string) (*dbmodels.User, *dbmodels.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAndProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dbmodels.User)
	ret1, _ := ret[1].(*dbmodels.Profile)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserAndProfile indicates an expected call of GetUserAndProfile.
func (mr *MockDBAPIMockRecorder) GetUserAndProfile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAndProfile", reflect.TypeOf((*MockDBAPI)(nil).GetUserAndProfile), arg0, arg1, arg2)
}

// HasToken mocks base method.
func (m *MockDBAPI) HasToken(arg0 context.Context, arg1, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasToken", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasToken indicates an expected call of HasToken.
func (mr *MockDBAPIMockRecorder) HasToken(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasToken", reflect.TypeOf((*MockDBAPI)(nil).HasToken), arg0, arg1, arg2, arg3)
}

// Rollback mocks base method.
func (m *MockDBAPI) Rollback(arg0 *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockDBAPIMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockDBAPI)(nil).Rollback), arg0)
}

// SaveToken mocks base method.
func (m *MockDBAPI) SaveToken(arg0 context.Context, arg1 *dbmodels.Profile, arg2 string, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveToken", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveToken indicates an expected call of SaveToken.
func (mr *MockDBAPIMockRecorder) SaveToken(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveToken", reflect.TypeOf((*MockDBAPI)(nil).SaveToken), arg0, arg1, arg2, arg3)
}
