// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/smartnuance/saas-kit/pkg/event (interfaces: DBAPI)

// Package event is a generated GoMock package.
package event

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dbmodels "github.com/smartnuance/saas-kit/pkg/event/dbmodels"
	models "github.com/smartnuance/saas-kit/pkg/graph/models"
	paging "github.com/smartnuance/saas-kit/pkg/lib/paging"
)

// MockDBAPI is a mock of DBAPI interface.
type MockDBAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDBAPIMockRecorder
}

// MockDBAPIMockRecorder is the mock recorder for MockDBAPI.
type MockDBAPIMockRecorder struct {
	mock *MockDBAPI
}

// NewMockDBAPI creates a new mock instance.
func NewMockDBAPI(ctrl *gomock.Controller) *MockDBAPI {
	mock := &MockDBAPI{ctrl: ctrl}
	mock.recorder = &MockDBAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBAPI) EXPECT() *MockDBAPIMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockDBAPI) BeginTx(arg0 context.Context) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", arg0)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockDBAPIMockRecorder) BeginTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockDBAPI)(nil).BeginTx), arg0)
}

// Commit mocks base method.
func (m *MockDBAPI) Commit(arg0 *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockDBAPIMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDBAPI)(nil).Commit), arg0)
}

// CreateEvent mocks base method.
func (m *MockDBAPI) CreateEvent(arg0 context.Context, arg1 *models.Event) (*dbmodels.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1)
	ret0, _ := ret[0].(*dbmodels.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockDBAPIMockRecorder) CreateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockDBAPI)(nil).CreateEvent), arg0, arg1)
}

// CreateWorkshop mocks base method.
func (m *MockDBAPI) CreateWorkshop(arg0 context.Context, arg1 *models.WorkshopInput) (*dbmodels.Workshop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkshop", arg0, arg1)
	ret0, _ := ret[0].(*dbmodels.Workshop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkshop indicates an expected call of CreateWorkshop.
func (mr *MockDBAPIMockRecorder) CreateWorkshop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkshop", reflect.TypeOf((*MockDBAPI)(nil).CreateWorkshop), arg0, arg1)
}

// DeleteWorkshop mocks base method.
func (m *MockDBAPI) DeleteWorkshop(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkshop", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkshop indicates an expected call of DeleteWorkshop.
func (mr *MockDBAPIMockRecorder) DeleteWorkshop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkshop", reflect.TypeOf((*MockDBAPI)(nil).DeleteWorkshop), arg0, arg1)
}

// GetEvent mocks base method.
func (m *MockDBAPI) GetEvent(arg0 context.Context, arg1 string) (*dbmodels.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", arg0, arg1)
	ret0, _ := ret[0].(*dbmodels.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockDBAPIMockRecorder) GetEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockDBAPI)(nil).GetEvent), arg0, arg1)
}

// GetWorkshop mocks base method.
func (m *MockDBAPI) GetWorkshop(arg0 context.Context, arg1 string) (*dbmodels.Workshop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkshop", arg0, arg1)
	ret0, _ := ret[0].(*dbmodels.Workshop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkshop indicates an expected call of GetWorkshop.
func (mr *MockDBAPIMockRecorder) GetWorkshop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkshop", reflect.TypeOf((*MockDBAPI)(nil).GetWorkshop), arg0, arg1)
}

// ListWorkshops mocks base method.
func (m *MockDBAPI) ListWorkshops(arg0 context.Context, arg1 string, arg2 paging.Page) (WorkshopList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkshops", arg0, arg1, arg2)
	ret0, _ := ret[0].(WorkshopList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkshops indicates an expected call of ListWorkshops.
func (mr *MockDBAPIMockRecorder) ListWorkshops(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkshops", reflect.TypeOf((*MockDBAPI)(nil).ListWorkshops), arg0, arg1, arg2)
}

// Rollback mocks base method.
func (m *MockDBAPI) Rollback(arg0 *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockDBAPIMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockDBAPI)(nil).Rollback), arg0)
}
