# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Role
scalar Time

"""
FirstSpec describes the first page of a collection of items.

It's no more than a wrapped page size.
"""
type FirstSpec {
    """
    The size (number of items) of the first page.
    """
    pageSize: Int!
}

"""
A PreviousSpec describes the previous page of the current one.

It does not explicitely identify the first item to be stable upon inserts.
"""
type PreviousSpec {
    """
    End of the previous page idenfied by the first item's ID on the successing page (usually equals to the current page).
    """
    end: String!
    """
    The size (number of items) of a previous page.
    """
    pageSize: Int!
}

"""
A NextSpec describes the next page of the current one.

It does not explicitely identify the last item to be stable upon inserts.
"""
type NextSpec {
    """
    Start of the next page idenfied by the last item's ID on the preceding page (usually equals to the current page).
    """
    start: String!
    """
    The size (number of items) of a next page.
    """
    pageSize: Int!
}

type FullSpec {
    """
    Start of the a page idenfied by the first item's ID.
    """
    start: String!
    """
    End of the a page idenfied by the last item's ID.
    """
    end: String!
    """
    The size (number of items) of a page.
    """
    pageSize: Int!
}

type Paging {
    prev: PreviousSpec
    cur: FullSpec
    next: NextSpec
}

type Instance {
  id: ID!
  name: String!
  URL: String!
}

type Event {
  id: ID!
  instance: Instance!
  eventInfo: EventInfo!
  starts: Time!
  ends: Time
}

type EventInfo {
  title: String!
  slug: String!
  locationName: String!
  locationURL: String!
}

type Workshop {
  id: ID!
  instance: ID!
  workshopInfo: WorkshopInfo!
  starts: Time!
  ends: Time
  event: Event!
}

type WorkshopInfo {
  title: String!
  slug: String!
  locationName: String!
  locationURL: String!
  couples: Boolean!
}

input WorkshopInfoInput {
  title: String!
  slug: String!
  locationName: String!
  locationURL: String!
  couples: Boolean!
}

input WorkshopInput {
  id: ID!
  instance: ID!
  workshopInfo: WorkshopInfoInput!
  starts: Time!
  ends: Time
  eventID: ID!
}

type WorkshopList {
    items: [Workshop!]!
    paging: Paging!
}

type Query {
  workshops: WorkshopList
}

type Mutation {
  createWorkshop(input: WorkshopInput!): Workshop!
}
